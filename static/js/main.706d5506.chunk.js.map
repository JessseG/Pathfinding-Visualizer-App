{"version":3,"sources":["algorithms/DepthFirst.js","algorithms/Dijkstra.js","algorithms/Astar.js","components/Node.js","components/Pathfind.js","App.js","index.js"],"names":["DepthFirst","startNode","endNode","Grid","Y","X","visitedNodes","node","push","y","includes","x","isWall","k","length","error","i","Dijkstra","shortestPath","d","currentNode","probeRight","probeDown","probeLeft","probeUp","j","nodeA","nodeB","dist","undefined","isStart","Astar","probeRight2","probeDown2","probeLeft2","probeUp2","frontier","frontier2","heuristic","h","tempDist","min","minNode","console","log","Node","isEnd","classes","className","id","startY","Math","floor","endX","endY","Pathfind","useState","setGrid","grid","setG","setDijkstra","setAstar","setDepthFirst","DijkstraNodes","setDijkstraNodes","DijkstraPath","setDijkstraPath","AstarNodes","setAstarNodes","AstarPath","setAstarPath","DepthNodes","setDepthNodes","useEffect","initializeGrid","Array","createSpots","setHeuristics","dijkstra1","astar1","depthFirst1","reloadAlgorithms","start","end","dijkstraX","astarX","depthSearchX","distance","sqrt","pow","round","Number","EPSILON","Spot","this","random","printTarget","e","target","substring","draw","mouseDown","down","val","document","addEventListener","onmouseup","removeEventListener","check1","test","getElementById","outputGrid","map","column","columnIndex","row","rowIndex","clearObstacles","manual","clearSearchSpace","onClick","randomization","setTimeout","drawDijkstraPath","drawAstarPath","drawDepthPath","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.706d5506.chunk.js","sourcesContent":["import React from \"react\";\n\nconst DepthFirst = (startNode, endNode, Grid, Y, X) => {\n  const visitedNodes = [];\n\n  let node = startNode;\n  visitedNodes.push(node);\n\n  let i = 0;\n  while (node !== endNode) {\n    // probe up\n    if (\n      node.y >= 1 &&\n      !visitedNodes.includes(Grid[node.y - 1][node.x]) &&\n      !Grid[node.y - 1][node.x].isWall\n    ) {\n      visitedNodes.push(Grid[node.y - 1][node.x]);\n      node = Grid[node.y - 1][node.x];\n    }\n\n    // probe right\n    else if (\n      node.x <= X - 2 &&\n      !visitedNodes.includes(Grid[node.y][node.x + 1]) &&\n      !Grid[node.y][node.x + 1].isWall\n    ) {\n      visitedNodes.push(Grid[node.y][node.x + 1]);\n      node = Grid[node.y][node.x + 1];\n    }\n\n    // probe down\n    else if (\n      node.y <= Y - 2 &&\n      !visitedNodes.includes(Grid[node.y + 1][node.x]) &&\n      !Grid[node.y + 1][node.x].isWall\n    ) {\n      visitedNodes.push(Grid[node.y + 1][node.x]);\n      node = Grid[node.y + 1][node.x];\n    }\n\n    // probe left\n    else if (\n      node.x >= 1 &&\n      !visitedNodes.includes(Grid[node.y][node.x - 1]) &&\n      !Grid[node.y][node.x - 1].isWall\n    ) {\n      visitedNodes.push(Grid[node.y][node.x - 1]);\n      node = Grid[node.y][node.x - 1];\n    }\n\n    // backrtrack\n    else {\n      let k = visitedNodes.length - 1;\n      while (true) {\n        node = visitedNodes[k];\n\n        // probe up\n        if (\n          node.y >= 1 &&\n          !visitedNodes.includes(Grid[node.y - 1][node.x]) &&\n          !Grid[node.y - 1][node.x].isWall\n        ) {\n          visitedNodes.push(Grid[node.y - 1][node.x]);\n          node = Grid[node.y - 1][node.x];\n          break;\n        }\n\n        // probe right\n        else if (\n          node.x <= X - 2 &&\n          !visitedNodes.includes(Grid[node.y][node.x + 1]) &&\n          !Grid[node.y][node.x + 1].isWall\n        ) {\n          visitedNodes.push(Grid[node.y][node.x + 1]);\n          node = Grid[node.y][node.x + 1];\n          break;\n        }\n\n        // probe down\n        else if (\n          node.y <= Y - 2 &&\n          !visitedNodes.includes(Grid[node.y + 1][node.x]) &&\n          !Grid[node.y + 1][node.x].isWall\n        ) {\n          visitedNodes.push(Grid[node.y + 1][node.x]);\n          node = Grid[node.y + 1][node.x];\n          break;\n        }\n\n        // probe left\n        else if (\n          node.x >= 1 &&\n          !visitedNodes.includes(Grid[node.y][node.x - 1]) &&\n          !Grid[node.y][node.x - 1].isWall\n        ) {\n          visitedNodes.push(Grid[node.y][node.x - 1]);\n          node = Grid[node.y][node.x - 1];\n          break;\n        }\n\n        // terminate\n        else if (k === 0) {\n          return {\n            visitedNodes,\n            error: \"No path\",\n          };\n        }\n        k--;\n      }\n    }\n\n    i++;\n    // console.log(none);\n    // console.log(node);\n    // break;\n  }\n  // console.log(visitedNodes);\n  return { visitedNodes };\n};\n\nexport default DepthFirst;\n","import React from \"react\";\n\nfunction Dijkstra(startNode, endNode, Grid, Y, X) {\n  const visitedNodes = [];\n  const shortestPath = [];\n\n  startNode.d = 0;\n  visitedNodes.push(startNode);\n\n  let currentNode = startNode;\n\n  // ______________________________________________________________\n\n  function probeRight(node) {\n    // console.log(node);\n    if (\n      node.x <= X - 2 &&\n      !Grid[node.y][node.x + 1].isWall &&\n      !visitedNodes.includes(Grid[node.y][node.x + 1])\n    ) {\n      return true;\n    }\n  }\n  function probeDown(node) {\n    if (\n      node.y <= Y - 2 &&\n      !Grid[node.y + 1][node.x].isWall &&\n      !visitedNodes.includes(Grid[node.y + 1][node.x])\n    ) {\n      return true;\n    }\n  }\n  function probeLeft(node) {\n    if (\n      node.x >= 1 &&\n      !Grid[node.y][node.x - 1].isWall &&\n      !visitedNodes.includes(Grid[node.y][node.x - 1])\n    ) {\n      return true;\n    }\n  }\n  function probeUp(node) {\n    if (\n      node.y >= 1 &&\n      !Grid[node.y - 1][node.x].isWall &&\n      !visitedNodes.includes(Grid[node.y - 1][node.x])\n    ) {\n      return true;\n    }\n  }\n\n  // ______________________________________________________________\n\n  // probeRight\n  if (!Grid[startNode.y][startNode.x + 1].isWall) {\n    currentNode = Grid[startNode.y][startNode.x + 1];\n    currentNode.d = startNode.d + 1;\n    visitedNodes.push(currentNode);\n  }\n  // probeDown\n  if (!Grid[startNode.y + 1][startNode.x].isWall) {\n    currentNode = Grid[startNode.y + 1][startNode.x];\n    currentNode.d = startNode.d + 1;\n    visitedNodes.push(currentNode);\n  }\n  // probeLeft\n  if (!Grid[startNode.y][startNode.x - 1].isWall) {\n    currentNode = Grid[startNode.y][startNode.x - 1];\n    currentNode.d = startNode.d + 1;\n    visitedNodes.push(currentNode);\n  }\n  // probeUp\n  if (!Grid[startNode.y - 1][startNode.x].isWall) {\n    currentNode = Grid[startNode.y - 1][startNode.x];\n    currentNode.d = startNode.d + 1;\n    visitedNodes.push(currentNode);\n  }\n\n  let i = 1;\n  let node;\n\n  while (i < visitedNodes.length) {\n    node = visitedNodes[i];\n\n    // console.log(node);\n    if (probeRight(node)) {\n      Grid[node.y][node.x + 1].d = node.d + 1;\n      visitedNodes.push(Grid[node.y][node.x + 1]);\n      if (Grid[node.y][node.x + 1] === endNode) {\n        break;\n      }\n    }\n    if (probeDown(node)) {\n      Grid[node.y + 1][node.x].d = node.d + 1;\n      visitedNodes.push(Grid[node.y + 1][node.x]);\n      if (Grid[node.y + 1][node.x] === endNode) {\n        break;\n      }\n    }\n    if (probeLeft(node)) {\n      Grid[node.y][node.x - 1].d = node.d + 1;\n      visitedNodes.push(Grid[node.y][node.x - 1]);\n      if (Grid[node.y][node.x - 1] === endNode) {\n        break;\n      }\n    }\n    if (probeUp(node)) {\n      Grid[node.y - 1][node.x].d = node.d + 1;\n      visitedNodes.push(Grid[node.y - 1][node.x]);\n      if (Grid[node.y - 1][node.x] === endNode) {\n        break;\n      }\n    }\n\n    i++;\n  }\n\n  if (visitedNodes.includes(endNode)) {\n    let j = visitedNodes.length - 1;\n    let k = j - 1;\n\n    shortestPath.push(visitedNodes[j]);\n\n    let nodeA = visitedNodes[j];\n\n    let nodeB = visitedNodes[k];\n\n    let dist = nodeA.d;\n\n    while (true) {\n      // check Left\n      if (nodeA.x >= 1 && visitedNodes.includes(Grid[nodeA.y][nodeA.x - 1])) {\n        if (Grid[nodeA.y][nodeA.x - 1].d < dist) {\n          dist = Grid[nodeA.y][nodeA.x - 1].d;\n          nodeB = Grid[nodeA.y][nodeA.x - 1];\n        }\n      }\n      // check Down\n      if (\n        nodeA.y <= Y - 2 &&\n        visitedNodes.includes(Grid[nodeA.y + 1][nodeA.x])\n      ) {\n        if (Grid[nodeA.y + 1][nodeA.x].d < dist) {\n          dist = Grid[nodeA.y + 1][nodeA.x].d;\n          nodeB = Grid[nodeA.y + 1][nodeA.x];\n        }\n      }\n      // check Up\n      if (nodeA.y >= 1 && visitedNodes.includes(Grid[nodeA.y - 1][nodeA.x])) {\n        if (Grid[nodeA.y - 1][nodeA.x].d < dist) {\n          dist = Grid[nodeA.y - 1][nodeA.x].d;\n          nodeB = Grid[nodeA.y - 1][nodeA.x];\n        }\n      }\n      // check Right\n      if (\n        nodeA.x <= X - 2 &&\n        visitedNodes.includes(Grid[nodeA.y][nodeA.x + 1])\n      ) {\n        if (Grid[nodeA.y][nodeA.x + 1].d < dist) {\n          dist = Grid[nodeA.y][nodeA.x + 1].d;\n          nodeB = Grid[nodeA.y][nodeA.x + 1];\n        }\n      }\n\n      shortestPath.push(nodeB);\n      // console.log(nodeA);\n      // console.log(nodeB);\n\n      if (nodeB === undefined) {\n        break;\n      }\n\n      if (nodeB.isStart) {\n        break;\n      }\n\n      nodeA = nodeB;\n    }\n  }\n\n  return { visitedNodes, shortestPath, error: \"No path\" };\n}\n\nfunction distance(nodeA, nodeB) {\n  let distance = Math.sqrt(\n    Math.pow(nodeB.x - nodeA.x, 2) + Math.pow(nodeB.y - nodeA.y, 2)\n  );\n  distance = Math.round((distance + Number.EPSILON) * 100) / 100;\n  return distance;\n}\n\nexport default Dijkstra;\n","import React from \"react\";\n\nfunction Astar(startNode, endNode, Grid, Y, X) {\n  function probeRight(node) {\n    // console.log(node);\n    if (\n      node.x <= X - 2 &&\n      !Grid[node.y][node.x + 1].isWall &&\n      !visitedNodes.includes(Grid[node.y][node.x + 1])\n    ) {\n      return true;\n    }\n  }\n  function probeDown(node) {\n    if (\n      node.y <= Y - 2 &&\n      !Grid[node.y + 1][node.x].isWall &&\n      !visitedNodes.includes(Grid[node.y + 1][node.x])\n    ) {\n      return true;\n    }\n  }\n  function probeLeft(node) {\n    if (\n      node.x >= 1 &&\n      !Grid[node.y][node.x - 1].isWall &&\n      !visitedNodes.includes(Grid[node.y][node.x - 1])\n    ) {\n      return true;\n    }\n  }\n  function probeUp(node) {\n    if (\n      node.y >= 1 &&\n      !Grid[node.y - 1][node.x].isWall &&\n      !visitedNodes.includes(Grid[node.y - 1][node.x])\n    ) {\n      return true;\n    }\n  }\n\n  //________________________________________________________________________________\n\n  function probeRight2(node) {\n    // console.log(node);\n    if (\n      node.x <= X - 2 &&\n      !Grid[node.y][node.x + 1].isWall &&\n      !visitedNodes.includes(Grid[node.y][node.x + 1])\n    ) {\n      return true;\n    }\n  }\n  function probeDown2(node) {\n    if (\n      node.y <= Y - 2 &&\n      !Grid[node.y + 1][node.x].isWall &&\n      !visitedNodes.includes(Grid[node.y + 1][node.x])\n    ) {\n      return true;\n    }\n  }\n  function probeLeft2(node) {\n    if (\n      node.x >= 1 &&\n      !Grid[node.y][node.x - 1].isWall &&\n      !visitedNodes.includes(Grid[node.y][node.x - 1])\n    ) {\n      return true;\n    }\n  }\n  function probeUp2(node) {\n    if (\n      node.y >= 1 &&\n      !Grid[node.y - 1][node.x].isWall &&\n      !visitedNodes.includes(Grid[node.y - 1][node.x])\n    ) {\n      return true;\n    }\n  }\n\n  // ______________________________________________________________\n\n  const frontier = [];\n  const frontier2 = [];\n  const visitedNodes = [];\n  const shortestPath = [];\n\n  startNode.d = 0;\n  // startNode.h = distance(startNode, endNode);  // already calculated\n\n  visitedNodes.push(startNode);\n\n  let currentNode;\n\n  let heuristic = startNode.h;\n\n  let tempDist = 0;\n\n  // ______________________________________________________________\n\n  // probeRight\n  if (probeRight(startNode)) {\n    frontier2.push(Grid[startNode.y][startNode.x + 1]);\n    if (Grid[startNode.y][startNode.x + 1].h < heuristic) {\n      tempDist = startNode.d;\n      frontier.push(Grid[startNode.y][startNode.x + 1]);\n      heuristic = Grid[startNode.y][startNode.x + 1].h;\n      // console.log(Grid[startNode.y][startNode.x + 1]);\n      // console.log(\"probeRight\");\n    }\n  }\n  // probeDown\n  if (probeDown(startNode)) {\n    frontier2.push(Grid[startNode.y + 1][startNode.x]);\n    if (Grid[startNode.y + 1][startNode.x].h < heuristic) {\n      tempDist = startNode.d;\n      frontier.push(Grid[startNode.y + 1][startNode.x]);\n      heuristic = Grid[startNode.y + 1][startNode.x].h;\n      // console.log(Grid[startNode.y + 1][startNode.x]);\n      // console.log(\"probeDown\");\n    }\n  }\n  // probeLeft\n  if (probeLeft(startNode)) {\n    frontier2.push(Grid[startNode.y][startNode.x - 1]);\n    if (Grid[startNode.y][startNode.x - 1].h < heuristic) {\n      tempDist = startNode.d;\n      frontier.push(Grid[startNode.y][startNode.x - 1]);\n      heuristic = Grid[startNode.y][startNode.x - 1].h;\n      // console.log(Grid[startNode.y][startNode.x - 1]);\n      // console.log(\"probeLeft\");\n    }\n  }\n  // probeUp\n  if (probeUp(startNode)) {\n    frontier2.push(Grid[startNode.y - 1][startNode.x]);\n    if (Grid[startNode.y - 1][startNode.x].h < heuristic) {\n      tempDist = startNode.d;\n      frontier.push(Grid[startNode.y - 1][startNode.x]);\n      heuristic = Grid[startNode.y - 1][startNode.x].h;\n      // console.log(Grid[startNode.y - 1][startNode.x]);\n      // console.log(\"probeUp\");\n    }\n  }\n\n  if (frontier2[0] === undefined) {\n    return { visitedNodes, shortestPath, error: \"No path\" };\n  }\n\n  let min = frontier2[0].h;\n  let minNode = frontier2[0];\n\n  for (let i = 1; i < frontier2.length; i++) {\n    let h = frontier2[i].h;\n    if (h < min) {\n      min = h;\n      minNode = frontier2[i];\n    }\n  }\n\n  frontier.push(minNode);\n\n  if (frontier[frontier.length - 1] === undefined) {\n    console.log(\"broke\");\n    // console.log(frontier[frontier.length - 1]);\n\n    return { visitedNodes, shortestPath, error: \"No path\" };\n  }\n\n  // console.log(frontier[frontier.length - 1]);\n  frontier[frontier.length - 1].d = tempDist + 1;\n  visitedNodes.push(frontier[frontier.length - 1]);\n\n  let i = 1;\n  let node = visitedNodes[visitedNodes.length - 1];\n\n  // Astar\n  while (node !== null && node !== endNode) {\n    if (node === endNode) {\n      break;\n    }\n\n    node = visitedNodes[visitedNodes.length - 1];\n\n    // break;\n    heuristic = node.h;\n\n    // console.log(node);\n\n    if (probeRight(node)) {\n      if (Grid[node.y][node.x + 1].h < heuristic) {\n        tempDist = node.d;\n        frontier.push(Grid[node.y][node.x + 1]);\n        heuristic = Grid[node.y][node.x + 1].h;\n        // console.log(Grid[node.y][node.x + 1]);\n      }\n    }\n\n    if (probeDown(node)) {\n      if (Grid[node.y + 1][node.x].h < heuristic) {\n        tempDist = node.d;\n        frontier.push(Grid[node.y + 1][node.x]);\n        heuristic = Grid[node.y + 1][node.x].h;\n        // console.log(Grid[node.y + 1][node.x]);\n      }\n    }\n\n    if (probeLeft(node)) {\n      if (Grid[node.y][node.x - 1].h < heuristic) {\n        tempDist = node.d;\n        frontier.push(Grid[node.y][node.x - 1]);\n        heuristic = Grid[node.y][node.x - 1].h;\n      }\n    }\n\n    if (probeUp(node)) {\n      if (Grid[node.y - 1][node.x].h < heuristic) {\n        tempDist = node.d;\n        frontier.push(Grid[node.y - 1][node.x]);\n        heuristic = Grid[node.y - 1][node.x].h;\n      }\n    }\n\n    if (\n      !frontier[frontier.length - 1].isWall &&\n      !visitedNodes.includes(frontier[frontier.length - 1])\n    ) {\n      frontier[frontier.length - 1].d = tempDist + 1;\n      visitedNodes.push(frontier[frontier.length - 1]);\n      // console.log(\"astar\");\n\n      if (frontier[frontier.length - 1] === endNode) {\n        console.log(\"END\");\n        break;\n      }\n\n      i++;\n    } else {\n      let j = 0;\n\n      // alternate to dijkstras\n      while (node !== null && node !== undefined && node !== endNode) {\n        node = visitedNodes[j];\n\n        if (node === undefined) {\n          return { visitedNodes, shortestPath, error: \"No path\" };\n        }\n\n        if (probeRight2(node)) {\n          Grid[node.y][node.x + 1].d = node.d + 1;\n          visitedNodes.push(Grid[node.y][node.x + 1]);\n          // console.log(\"dijks\");\n          if (Grid[node.y][node.x + 1] === endNode) {\n            break;\n          }\n          if (Grid[node.y][node.x + 1].h < heuristic) {\n            node = Grid[node.y][node.x + 1];\n            break;\n          }\n        }\n        if (probeDown2(node)) {\n          Grid[node.y + 1][node.x].d = node.d + 1;\n          visitedNodes.push(Grid[node.y + 1][node.x]);\n          // console.log(\"dijks\");\n          if (Grid[node.y + 1][node.x] === endNode) {\n            break;\n          }\n          if (Grid[node.y + 1][node.x].h < heuristic) {\n            node = Grid[node.y + 1][node.x];\n            break;\n          }\n        }\n        if (probeLeft2(node)) {\n          Grid[node.y][node.x - 1].d = node.d + 1;\n          visitedNodes.push(Grid[node.y][node.x - 1]);\n          // console.log(\"dijks\");\n          if (Grid[node.y][node.x - 1] === endNode) {\n            break;\n          }\n          if (Grid[node.y][node.x - 1].h < heuristic) {\n            node = Grid[node.y][node.x - 1];\n            break;\n          }\n        }\n        if (probeUp2(node)) {\n          Grid[node.y - 1][node.x].d = node.d + 1;\n          visitedNodes.push(Grid[node.y - 1][node.x]);\n          // console.log(\"dijks\");\n          if (Grid[node.y - 1][node.x] === endNode) {\n            break;\n          }\n          if (Grid[node.y - 1][node.x].h < heuristic) {\n            node = Grid[node.y - 1][node.x];\n            break;\n          }\n        }\n        j++;\n      }\n\n      if (node === endNode) {\n        break;\n      }\n    }\n    if (node === endNode) {\n      break;\n    }\n  }\n\n  if (visitedNodes[i] === null) {\n    console.log(\"visitedNodes[i] is null\");\n  }\n\n  // retrace\n\n  if (visitedNodes.includes(endNode)) {\n    let j = visitedNodes.length - 1;\n    let k = j - 1;\n\n    shortestPath.push(visitedNodes[j]);\n\n    let nodeA = visitedNodes[j];\n\n    let nodeB = visitedNodes[k];\n\n    let dist = nodeA.d;\n\n    while (true) {\n      // break; // check Left\n      if (nodeA.x >= 1 && visitedNodes.includes(Grid[nodeA.y][nodeA.x - 1])) {\n        if (Grid[nodeA.y][nodeA.x - 1].d < dist) {\n          dist = Grid[nodeA.y][nodeA.x - 1].d;\n          nodeB = Grid[nodeA.y][nodeA.x - 1];\n        }\n      }\n      // check Down\n      if (\n        nodeA.y <= Y - 2 &&\n        visitedNodes.includes(Grid[nodeA.y + 1][nodeA.x])\n      ) {\n        if (Grid[nodeA.y + 1][nodeA.x].d < dist) {\n          dist = Grid[nodeA.y + 1][nodeA.x].d;\n          nodeB = Grid[nodeA.y + 1][nodeA.x];\n        }\n      }\n      // check Up\n      if (nodeA.y >= 1 && visitedNodes.includes(Grid[nodeA.y - 1][nodeA.x])) {\n        if (Grid[nodeA.y - 1][nodeA.x].d < dist) {\n          dist = Grid[nodeA.y - 1][nodeA.x].d;\n          nodeB = Grid[nodeA.y - 1][nodeA.x];\n        }\n      }\n      // check Right\n      if (\n        nodeA.x <= X - 2 &&\n        visitedNodes.includes(Grid[nodeA.y][nodeA.x + 1])\n      ) {\n        if (Grid[nodeA.y][nodeA.x + 1].d < dist) {\n          dist = Grid[nodeA.y][nodeA.x + 1].d;\n          nodeB = Grid[nodeA.y][nodeA.x + 1];\n        }\n      }\n\n      shortestPath.push(nodeB);\n      // console.log(nodeA);\n      // console.log(nodeB);\n\n      if (nodeB === undefined) {\n        break;\n      }\n\n      if (nodeB.isStart) {\n        break;\n      }\n\n      nodeA = nodeB;\n    }\n  }\n\n  return { visitedNodes, shortestPath, error: \"No path\" };\n}\n\nfunction distance(nodeA, nodeB) {\n  let distance = Math.sqrt(\n    Math.pow(nodeB.x - nodeA.x, 2) + Math.pow(nodeB.y - nodeA.y, 2)\n  );\n  distance = Math.round((distance + Number.EPSILON) * 100) / 100;\n  return distance;\n}\n\nexport default Astar;\n","import React, { useState, useEffect } from \"react\";\nimport \"./Node.css\";\n\nconst Node = ({ x, y, isStart, isEnd, isWall }) => {\n  const classes = isStart\n    ? \"node-start\"\n    : isEnd\n    ? \"node-end\"\n    : isWall\n    ? \"node-wall\"\n    : \"\";\n\n  return <div className={`node ${classes}`} id={`node-${y}-${x}`}></div>;\n};\n\nexport default Node;\n","import React, { useState, useEffect } from \"react\";\nimport DepthFirst from \"../algorithms/DepthFirst\";\nimport Dijkstra from \"../algorithms/Dijkstra\";\nimport Astar from \"../algorithms/Astar\";\nimport Node from \"./Node\";\nimport \"./Pathfind.css\";\nimport { render } from \"react-dom\";\nimport Knobster from \"./Knobster\";\n// import { Knob } from \"react-rotary-knob\";\n// import * as skins from \"react-rotary-knob-skin-pack\";\n// import { Knob, Arc, Pointer, Value } from \"rc-knob\";\n\n// const X = 160;\n// const Y = 100;\n\n// const X = 100;\n// const Y = 50;\n\nconst X = 70; // columns\nconst Y = 37; // rows\n\nconst startX = 3;\nconst startY = Math.floor(Math.floor(Y) / 2);\nconst endX = Math.floor(X) - 8;\nconst endY = Math.floor(Y / 2);\n\n// const startX = Math.floor(X / 5);\n// const startY = Math.floor(Y / 2);\n// const endX = Math.floor((X * 4) / 5);\n// const endY = Math.floor(Y / 2);\n\nconst Pathfind = () => {\n  const [Grid, setGrid] = useState([]);\n  var [grid, setG] = useState([]);\n\n  const [dijkstra, setDijkstra] = useState([]);\n  const [astar, setAstar] = useState([]);\n  const [depthFirst, setDepthFirst] = useState([]);\n\n  const [DijkstraNodes, setDijkstraNodes] = useState([]);\n  const [DijkstraPath, setDijkstraPath] = useState([]);\n\n  const [AstarNodes, setAstarNodes] = useState([]);\n  const [AstarPath, setAstarPath] = useState([]);\n\n  const [DepthNodes, setDepthNodes] = useState([]);\n\n  // const [mouseDown, setMouseDown] = useState(false);\n  const [mouseOver, setMouseOver] = useState(false);\n  const [isDrawing, setDrawing] = useState(false);\n\n  // var grid;\n\n  var startNode;\n  var endNode;\n\n  useEffect(() => {\n    initializeGrid();\n  }, []);\n\n  const initializeGrid = () => {\n    grid = new Array(X);\n\n    for (let i = 0; i < Y; i++) {\n      grid[i] = new Array(Y);\n    }\n\n    createSpots(grid);\n    setHeuristics(grid);\n\n    startNode = grid[startY][startX];\n    endNode = grid[endY][endX];\n\n    startNode.isWall = false;\n    endNode.isWall = false;\n\n    setG(grid);\n\n    setGrid(grid);\n\n    // setListeners(Grid);\n\n    const dijkstra1 = Dijkstra(startNode, endNode, grid, Y, X);\n    const astar1 = Astar(startNode, endNode, grid, Y, X);\n    const depthFirst1 = DepthFirst(startNode, endNode, grid, Y, X);\n\n    setDijkstraNodes(dijkstra1.visitedNodes);\n    setDijkstraPath(dijkstra1.shortestPath);\n\n    setAstarNodes(astar1.visitedNodes);\n    setAstarPath(astar1.shortestPath);\n\n    setDepthNodes(depthFirst1.visitedNodes);\n\n    setDijkstra(dijkstra1);\n    setAstar(astar1);\n    setDepthFirst(depthFirst1);\n  };\n\n  function reloadAlgorithms(start, end) {\n    if (startNode === undefined) {\n      startNode = start;\n      endNode = end;\n    }\n    const dijkstraX = Dijkstra(startNode, endNode, grid, Y, X);\n    const astarX = Astar(startNode, endNode, grid, Y, X);\n    const depthSearchX = DepthFirst(startNode, endNode, grid, Y, X);\n\n    setDijkstraNodes(dijkstraX.visitedNodes);\n    setDijkstraPath(dijkstraX.shortestPath);\n\n    setAstarNodes(astarX.visitedNodes);\n    setAstarPath(astarX.shortestPath);\n\n    setDepthNodes(depthSearchX.visitedNodes);\n  }\n\n  function distance(nodeA, nodeB) {\n    let distance = Math.sqrt(\n      Math.pow(nodeB.x - nodeA.x, 2) + Math.pow(nodeB.y - nodeA.y, 2)\n    );\n    distance = Math.round((distance + Number.EPSILON) * 100) / 100;\n    return distance;\n  }\n\n  function Spot(y, x) {\n    this.x = x;\n    this.y = y;\n    this.d = 0;\n    this.h = 0;\n    this.isStart = this.x === startX && this.y === startY;\n    this.isEnd = this.x === endX && this.y === endY;\n    this.isWall = false;\n    if (Math.random(1) < 0.3) {\n      this.isWall = true;\n    }\n  }\n\n  const createSpots = (grid) => {\n    for (let x = 0; x < X; x++) {\n      for (let y = 0; y < Y; y++) {\n        grid[y][x] = new Spot(y, x);\n      }\n    }\n  };\n\n  const setHeuristics = (grid) => {\n    for (let x = 0; x < X; x++) {\n      for (let y = 0; y < Y; y++) {\n        grid[y][x].h = distance(grid[y][x], grid[endY][endX]);\n      }\n    }\n  };\n\n  function printTarget(e) {\n    let id = e.target.id;\n    if (e === undefined || e === null || e === \"\" || id === null || id === \"\")\n      return;\n    let validate = id.substring(0, 4);\n    if (validate !== \"node\") return;\n    // console.log(e.target.id);\n    draw(e);\n  }\n\n  let mouseDown = false;\n\n  function down(e) {\n    // console.log(\"down\");\n    mouseDown = true;\n    printTarget(e);\n\n    console.log(val);\n    if (mouseDown) {\n      document.addEventListener(\"mouseover\", printTarget);\n    }\n  }\n\n  useEffect(() => {\n    document.addEventListener(\"mousedown\", down);\n\n    document.onmouseup = (e) => {\n      // console.log(\"up\");\n      mouseDown = false;\n      console.log(val);\n      if (e.target.id.substring(0, 4) === \"node\") {\n        reloadAlgorithms();\n      }\n      document.removeEventListener(\"mouseover\", printTarget);\n    };\n\n    // return () => {\n    //   document.removeEventListener(\"mouseover\", printTarget);\n    // };\n  }, []);\n\n  // _________________________________________________________________\n\n  const draw = (e) => {\n    let id = e.target.id;\n\n    let check1 = id.substring(6, 7);\n\n    let x;\n    let y;\n\n    if (check1 === \"-\") {\n      x = id.substring(5, 6);\n      y = id.substring(7);\n    } else if (/^\\d+$/.test(check1)) {\n      x = id.substring(5, 7);\n      y = id.substring(8);\n    }\n    // console.log(x + \"-\" + y);\n\n    if ((x == startX && y == startY) || (x == endX && y == endY)) {\n      return;\n    }\n\n    grid[y][x].isWall = !grid[y][x].isWall;\n\n    if (document.getElementById(id).className === \"node \") {\n      document.getElementById(id).className = \"node node-wall\";\n    } else if (document.getElementById(id).className === \"node node-wall\") {\n      document.getElementById(id).className = \"node \";\n    }\n\n    // document.getElementById(id).style = \"border: 1px solid rgb(53, 53, 53)\";\n  };\n\n  const outputGrid = (\n    <div>\n      {Grid.map((column, columnIndex) => {\n        return (\n          <div key={columnIndex} className=\"rowWrap\">\n            {column.map((row, rowIndex) => {\n              const { isStart, isEnd, isWall } = row;\n\n              return (\n                <Node\n                  x={columnIndex}\n                  y={rowIndex}\n                  isStart={isStart}\n                  isEnd={isEnd}\n                  isWall={isWall}\n                  key={rowIndex}\n                />\n              );\n            })}\n          </div>\n        );\n      })}\n    </div>\n  );\n\n  const clearObstacles = (manual) => {\n    for (let x = 0; x < X; x++) {\n      for (let y = 0; y < Y; y++) {\n        if (!grid[y][x].isStart && !grid[y][x].isEnd) {\n          grid[y][x].isWall = false;\n          document.getElementById(`node-${x}-${y}`).className = \"node \";\n        }\n      }\n    }\n    if (manual === true) {\n      reloadAlgorithms(grid[startY][startX], grid[endY][endX]);\n    }\n  };\n\n  const randomization = () => {\n    for (let x = 0; x < X; x++) {\n      for (let y = 0; y < Y; y++) {\n        if (!grid[y][x].isStart && !grid[y][x].isEnd) {\n          if (Math.random(1) < 0.3) {\n            grid[y][x].isWall = true;\n            document.getElementById(`node-${x}-${y}`).className =\n              \"node node-wall\";\n          }\n        }\n      }\n    }\n  };\n\n  const randomizeObstacles = () => {\n    clearObstacles();\n    randomization();\n    reloadAlgorithms(grid[startY][startX], grid[endY][endX]);\n  };\n\n  const clearSearchSpace = () => {\n    for (let x = 0; x < X; x++) {\n      for (let y = 0; y < Y; y++) {\n        if (!Grid[y][x].isStart && !Grid[y][x].isEnd && !Grid[y][x].isWall) {\n          document.getElementById(`node-${x}-${y}`).className = \"node \";\n        }\n      }\n    }\n  };\n\n  const drawDijkstraNodes = () => {\n    // iterates through all visited nodes\n    clearSearchSpace();\n\n    let i;\n    for (i = 0; i < DijkstraNodes.length; i++) {\n      const node = DijkstraNodes[i];\n      setTimeout(() => {\n        if (!node.isStart && !node.isEnd) {\n          document.getElementById(`node-${node.x}-${node.y}`).className =\n            \"node node-visited\";\n          // document.getElementById(`node-${node.x}-${node.y}`).style =\n          //   \"border: 1px solid white\";\n        }\n      }, i * 1.5);\n    }\n    setTimeout(() => drawDijkstraPath(), i * 1.5);\n  };\n\n  function drawDijkstraPath() {\n    for (let i = 0; i < DijkstraPath.length; i++) {\n      const node = DijkstraPath[i];\n      setTimeout(() => {\n        if (!node.isStart && !node.isEnd) {\n          document.getElementById(`node-${node.x}-${node.y}`).className =\n            \"node node-shortPath\";\n          // document.getElementById(`node-${node.x}-${node.y}`).style =\n          //   \"border: 1px solid rgb(255, 208, 0)\";\n        }\n      }, i * 10);\n    }\n  }\n\n  function drawAstarNodes() {\n    // iterates through all visited nodes\n    clearSearchSpace();\n\n    let i;\n    for (i = 0; i < AstarNodes.length; i++) {\n      const node = AstarNodes[i];\n      setTimeout(() => {\n        if (!node.isStart && !node.isEnd) {\n          document.getElementById(`node-${node.x}-${node.y}`).className =\n            \"node node-visited\";\n        }\n      }, i * 1.5);\n    }\n    setTimeout(() => drawAstarPath(), i * 1.5);\n  }\n\n  function drawAstarPath() {\n    for (let i = 0; i < AstarPath.length; i++) {\n      const node = AstarPath[i];\n      setTimeout(() => {\n        if (!node.isStart && !node.isEnd) {\n          document.getElementById(`node-${node.x}-${node.y}`).className =\n            \"node node-shortPath\";\n        }\n      }, i * 10);\n    }\n  }\n\n  function drawDepthNodes() {\n    // iterates through all visited nodes\n\n    clearSearchSpace();\n\n    let i;\n    for (i = 0; i < DepthNodes.length; i++) {\n      const node = DepthNodes[i];\n      setTimeout(() => {\n        if (!node.isStart && !node.isEnd) {\n          document.getElementById(`node-${node.x}-${node.y}`).className =\n            \"node node-visited\";\n          // document.getElementById(`node-${node.x}-${node.y}`).style =\n          //   \"border: 1px solid white\";\n        }\n      }, i * 5);\n    }\n    setTimeout(() => drawDepthPath(), i * 5);\n  }\n\n  function drawDepthPath() {\n    for (let i = 0; i < DepthNodes.length; i++) {\n      const node = DepthNodes[i];\n      setTimeout(() => {\n        if (!node.isStart && !node.isEnd) {\n          document.getElementById(`node-${node.x}-${node.y}`).className =\n            \"node node-shortPath\";\n        }\n      }, i * 5);\n    }\n  }\n\n  // function resetBoard() {\n\n  // }\n\n  const [val, setVal] = useState(60);\n\n  const handleSpeed = (e) => {\n    setVal(e.target.value);\n    // console.log(value / 10);\n  };\n\n  return (\n    <div className=\"pathfinder\">\n      <div className=\"centerGrid\">\n        <div className=\"app-body\">\n          {/* <h1>Pathfinder</h1> */}\n          {/* <select name=\"\" id=\"select-Preset\">\n          <option value=\"random\">Random</option>\n        </select> */}\n          <button id=\"randomize-Btn\" onClick={randomizeObstacles}>\n            Randomize\n          </button>\n          <button id=\"visualize-Btn\" onClick={drawDijkstraNodes}>\n            Dijkstra\n          </button>\n          <button id=\"visualize-Btn\" onClick={drawAstarNodes}>\n            Astar\n          </button>\n          <button id=\"visualize-Btn\" onClick={drawDepthNodes}>\n            Depth-First\n          </button>\n          <button id=\"clear-Btn\" onClick={() => clearObstacles(true)}>\n            Clear\n          </button>\n          <button id=\"reset-Btn\" onClick={clearSearchSpace}>\n            Reset\n          </button>\n        </div>\n        {/* <Knobster /> */}\n        {/* <Knobster /> */}\n        <div id=\"grid\">{outputGrid}</div>\n        {/* <DepthFirst /> */}\n      </div>\n    </div>\n  );\n};\n\nexport default Pathfind;\n","import React from \"react\";\nimport \"./App.css\";\nimport Pathind from \"./components/Pathfind\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Pathfinder</h1>\n      <Pathind />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}